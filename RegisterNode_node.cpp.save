/*
 I will write something important here at some point..
 MMN - Mathias Mikkel Neerup manee12@student.sdu.dk
 */

#include <sstream>
#include <iostream>

#include "AutoQuad.h"
#include "Session.h"

#define ST_IDLE            0
#define ST_RESET_RECV      1
#define ST_REQ_ADDR        2
#define ST_GOT_UNIQ_ADDR   3
#define ST_STREAM    4


#define LOOP_RATE 10


#define MSG_RESET       1
#define MSG_OK_ADDR     2
#define MSG_TELEM_VALUE 3
#define MSG_TELEM_RATE  4


class RegisterNode_node : public AutoQuad {
private:
	MessageCreator messageCreator;
public:
	RegisterNode_node(int argc, char** argv): AutoQuad(argc, argv){
		set_state( ST_IDLE );
	}

	void onTimer(const ros::TimerEvent& event){
	}

	void spin(){
		ros::spin();
	}

	void recv_reset_msg() {
		ROS_WARN("Reset msg received");
		canMSG canMessage = messageCreator.Create_ReqAddr(CAN_TYPE_SENSOR, CAN_SENSORS_GPS_LAT);
		pub_recv.publish(canMessage);
		last_msg = MSG_RESET;
	}

	void recv_ok_addr_msg(int id) {
		if(last_msg == MSG_RESET){
			if(){
				messageCreator.mySession.updateSession(id);
				last_msg = MSG_OK_ADDR;
			}
		}
	}

	void recv_telem_value_msg(int id){
		if(last_msg == MSG_OK_ADDR){
			// Update the current session
			messageCreator.mySession.updateSession(id);

			ROS_WARN("TELEM_VALUE");
			canMSG canMessage = messageCreator.Create_SendACK();
			pub_recv.publish(canMessage);
			last_msg = MSG_TELEM_VALUE;
		}



	void recv_telem_rate_msg(int id){
		if(last_msg == MSG_TELEM_VALUE){
			// Update the current session
			messageCreator.mySession.updateSession(id);

			ROS_WARN("TELEM_RATE");
			canMSG canMessage = messageCreator.Create_SendACK();
			pub_recv.publish(canMessage);
			state = ST_STREAM;
			last_msg = MSG_TELEM_RATE;
		}
	}

};
int main(int argc, char **argv){
	AutoQuad* autoquad = new RegisterNode_node(argc, argv);


	autoquad->spin();
	return 0;
}




